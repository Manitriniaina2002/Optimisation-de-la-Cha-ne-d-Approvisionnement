version: "3.8"

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15
    container_name: supply_chain_postgres
    environment:
      POSTGRES_DB: supply_chain_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - supply_chain_network

  # MongoDB pour données non-structurées
  mongodb:
    image: mongo:7
    container_name: supply_chain_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - supply_chain_network

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: supply_chain_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - supply_chain_network

  # Apache Kafka pour streaming de données
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: supply_chain_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - supply_chain_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: supply_chain_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - supply_chain_network

  # InfluxDB pour données de capteurs IoT
  influxdb:
    image: influxdb:2.7
    container_name: supply_chain_influxdb
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: supply_chain_metrics
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: password
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - supply_chain_network

  # Grafana pour visualisation des métriques
  grafana:
    image: grafana/grafana:latest
    container_name: supply_chain_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - influxdb
    networks:
      - supply_chain_network

  # Elasticsearch pour recherche et analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: supply_chain_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - supply_chain_network

  # Kibana pour visualisation Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: supply_chain_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - supply_chain_network

  # Apache Spark pour traitement Big Data
  spark-master:
    image: bitnami/spark:3.5
    container_name: supply_chain_spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - supply_chain_network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: supply_chain_spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - supply_chain_network

  # Jupyter pour notebooks d'analyse
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: supply_chain_jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - supply_chain_network

  # Application principale
  supply_chain_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supply_chain_main_app
    ports:
      - "8000:8000"
      - "8050:8050"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/supply_chain_db
      - MONGODB_URL=mongodb://mongodb:27017/supply_chain_mongo
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INFLUXDB_URL=http://influxdb:8086
    depends_on:
      - postgres
      - mongodb
      - redis
      - kafka
      - influxdb
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
    networks:
      - supply_chain_network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  kafka_data:
  influxdb_data:
  grafana_data:
  elasticsearch_data:

networks:
  supply_chain_network:
    driver: bridge
